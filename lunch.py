import pandas as pd

class LunchGenerator:
    def __init__(self, data_source):
        try:
            self.df = pd.read_csv(data_source)
            print("DataFrame –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DataFrame: {e}")
            self.df = None

        if self.df is None or self.df.empty:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª.")
        
        self.df.columns = self.df.columns.str.strip()
        self.df["–¢–∏–ø –±–ª—é–¥–∞"] = self.df["–¢–∏–ø –±–ª—é–¥–∞"].str.strip()

        self.lunch = {
            "–ü–µ—Ä–≤–æ–µ –±–ª—é–¥–æ": None,
            "—Å–∞–ª–∞—Ç": None,
            "–≥–∞—Ä–Ω–∏—Ä—ã": None,
            "–≤—Ç–æ—Ä–æ–µ –±–ª—é–¥–æ": None
        }
        self.create_lunch()

    def create_lunch(self):
        """–°–æ–∑–¥–∞—ë—Ç –æ–±–µ–¥, –≤—ã–±–∏—Ä–∞—è —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        categories = list(self.lunch.keys())
        for category in categories:
            available_dishes = self.df[self.df["–¢–∏–ø –±–ª—é–¥–∞"] == category]
            if not available_dishes.empty:
                selected_dish = available_dishes.sample(1).iloc[0]
                self.lunch[category] = selected_dish["–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∞:"]
            else:
                self.lunch[category] = None

    def add_emoji_to_dish(self, category, dish):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥–∞"""
        emojis = {
            "–ü–µ—Ä–≤–æ–µ –±–ª—é–¥–æ": "üç≤",    # –°—É–ø
            "–≤—Ç–æ—Ä–æ–µ –±–ª—é–¥–æ": "üçñ",   # –û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ
            "–≥–∞—Ä–Ω–∏—Ä—ã": "üçö",        # –ì–∞—Ä–Ω–∏—Ä
            "—Å–∞–ª–∞—Ç": "ü•ó"           # –°–∞–ª–∞—Ç
        }
        return f"{emojis.get(category, 'üçΩ')} {dish}" if dish else f"{category}: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–ª—é–¥–∞"

    def get_lunch_names(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –±–ª—é–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±–µ–¥–∞, —Å —ç–º–æ–¥–∑–∏"""
        lunch_names = []
        for category, dish in self.lunch.items():
            lunch_names.append(self.add_emoji_to_dish(category, dish))
        return "\n     ".join(lunch_names)  # –°—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±–ª—é–¥

    def get_ingredients(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Å–æ—Å—Ç–∞–≤–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥"""
        ingredients = []
        for category, dish in self.lunch.items():
            if dish and dish != "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–ª—é–¥–∞":
                ingredient = self.df[self.df["–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∞:"] == dish]["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ 1 –ø–æ—Ä—Ü–∏—é:"]
                if not ingredient.empty:
                    ingredients.append(f"{self.add_emoji_to_dish(category, dish)}:\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {ingredient.iloc[0]}")
                else:
                    ingredients.append(f"{self.add_emoji_to_dish(category, dish)}:\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                ingredients.append(f"{category}: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–ª—é–¥–∞")
        return "\n\n".join(ingredients)  # –°—Ç—Ä–æ–∫–∞ —Å —Å–æ—Å—Ç–∞–≤–∞–º–∏ –±–ª—é–¥

    def get_cooking_instructions(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥"""
        instructions = []
        for category, dish in self.lunch.items():
            if dish and dish != "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–ª—é–¥–∞":
                instruction = self.df[self.df["–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∞:"] == dish]["–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:"]
                if not instruction.empty:
                    instructions.append(f"{self.add_emoji_to_dish(category, dish)}:\n–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ: {instruction.iloc[0]}")
                else:
                    instructions.append(f"{self.add_emoji_to_dish(category, dish)}:\n–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                instructions.append(f"{category}: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–ª—é–¥–∞")
        return "\n\n".join(instructions)  # –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –±–ª—é–¥

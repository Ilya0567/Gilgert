import logging
import os
import signal
import sys
from logging.handlers import RotatingFileHandler
from functools import wraps
from telegram.ext import (
    ApplicationBuilder,
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    PicklePersistence,
    PersistenceInput
)
import time
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz
import asyncio
from telegram.ext import CallbackContext

from utils.states import MENU, GPT_QUESTION, CHECK_PRODUCT, RECIPES

# Set up logging first
LOG_FILENAME = 'bot.log'
LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

# Ensure the log directory exists
os.makedirs('logs', exist_ok=True)
log_file_path = os.path.join('logs', LOG_FILENAME)

# Create handlers for both console and file output
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(logging.Formatter(LOG_FORMAT))

file_handler = RotatingFileHandler(
    log_file_path, 
    maxBytes=10*1024*1024,  # 10MB max file size
    backupCount=5  # Keep 5 backup files
)
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(logging.Formatter(LOG_FORMAT))

# Configure the root logger
logger = logging.getLogger()
logger.setLevel(logging.INFO)
logger.addHandler(console_handler)
logger.addHandler(file_handler)

# Get a module-specific logger
bot_logger = logging.getLogger(__name__)

# Import database and models
from database.database import (
    SessionLocal, 
    get_or_create_user, 
    get_or_create_session,
    end_user_session,
    log_user_interaction,
)
from database.crud import add_health_check  # Moved this import here
# –ò–º–ø–æ—Ä—Ç —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
from handlers.menu import start_menu, menu_callback, cancel
from handlers.gpt import handle_message
from handlers.product import product_user_message
from handlers.recipes import recipes_callback  
from database.models import ClientProfile

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (TOKEN_BOT)
from utils.config import TOKEN_BOT, CHAT_ID

# Dictionary to store active sessions
active_sessions = {}

# Decorator for tracking user interactions
def track_user(func):
    @wraps(func)
    async def wrapper(update, context, *args, **kwargs):
        # Extract user information
        user = update.effective_user
        handler_name = func.__name__
        
        bot_logger.info(f"Handler called: {handler_name} by user: {user.id} ({user.username or 'No username'})")
        
        # Create a database session
        db = SessionLocal()
        start_time = time.time()
        
        try:
            bot_logger.info(f"Checking if user {user.id} exists in database...")
            
            # Get or create user profile
            user_profile = get_or_create_user(
                db=db,
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            context.user_data['user_profile'] = user_profile
            
            # Handle session tracking
            if handler_name == 'start_menu':
                # Create new session when user starts bot
                session = get_or_create_session(db, user_profile.id)
                active_sessions[user.id] = session.id
                bot_logger.info(f"Created new session for user {user.id}: {session.id}")
            elif handler_name == 'cancel':
                # End session when user cancels
                if user.id in active_sessions:
                    session_id = active_sessions[user.id]
                    end_user_session(db, session_id)
                    del active_sessions[user.id]
                    bot_logger.info(f"Ended session {session_id} for user {user.id}")

            # Log the interaction
            action_type = handler_name
            action_data = str(update.callback_query.data) if update.callback_query else str(update.message.text) if update.message else None
            
            # Call the original handler function
            bot_logger.debug(f"Calling original handler: {handler_name}")
            result = await func(update, context, *args, **kwargs)
            
            # Calculate response time
            response_time = int((time.time() - start_time) * 1000)  # Convert to milliseconds
            
            # Log successful interaction
            log_user_interaction(
                db=db,
                user_id=user_profile.id,
                action_type=action_type,
                action_data=action_data,
                response_time=response_time,
                success=True
            )
            
            return result
            
        except Exception as e:
            bot_logger.error(f"Error tracking user: {e}", exc_info=True)
            # Log failed interaction
            if 'user_profile' in locals():
                log_user_interaction(
                    db=db,
                    user_id=user_profile.id,
                    action_type=handler_name,
                    action_data=str(e),
                    response_time=int((time.time() - start_time) * 1000),
                    success=False
                )
            # Still call the original function even if tracking fails
            return await func(update, context, *args, **kwargs)
        finally:
            bot_logger.debug(f"Closing database session for user: {user.id}")
            db.close()
            
    return wrapper

# Apply the track_user decorator to all handler functions
start_menu = track_user(start_menu)
menu_callback = track_user(menu_callback)
handle_message = track_user(handle_message)
product_user_message = track_user(product_user_message)
recipes_callback = track_user(recipes_callback)
cancel = track_user(cancel)
send_survey_invitation = track_user(send_survey_invitation)
handle_survey_callback = track_user(handle_survey_callback)
# universal handlers will be decorated after they are defined

from stats_handler import get_stats

from handlers.stats import stats_recipes, stats_health, stats_users, stats_help

from handlers.broadcast import get_broadcast_handler, process_broadcasts
from handlers.admin import admin_commands
from handlers.survey import send_survey_invitation, schedule_survey_reminders, handle_survey_callback

async def send_daily_message(context, chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await context.bot.get_chat(chat_id)
    user_name = user.first_name if user.first_name else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏ –≤ –æ–¥–Ω—É –ª–∏–Ω–∏—é
    keyboard = [[
        InlineKeyboardButton("üò¢", callback_data='very_sad'),
        InlineKeyboardButton("üòï", callback_data='sad'),
        InlineKeyboardButton("üòê", callback_data='neutral'),
        InlineKeyboardButton("üôÇ", callback_data='good'),
        InlineKeyboardButton("üòä", callback_data='very_good')
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –ø–æ –∏–º–µ–Ω–∏
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, {user_name}! –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è? –û—Ü–µ–Ω–∏ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ.",
        reply_markup=reply_markup
    )

    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    bot_logger.info(f"Message sent successfully to user: {user_name} (ID: {chat_id})")


def schedule_daily_message(application):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ 1:32 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏."""
    loop = asyncio.get_event_loop()
    scheduler = AsyncIOScheduler(event_loop=loop)
    moscow_tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(moscow_tz)
    next_run_time = now.replace(hour=12, minute=0, second=0, microsecond=0)
    if now >= next_run_time:
        next_run_time += timedelta(days=1)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    try:
        users = db.query(ClientProfile).all()
        for user in users:
            bot_logger.info(f"Scheduling daily message for user: {user.username} (ID: {user.telegram_id})")
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            scheduler.add_job(
                send_daily_message,
                'interval',
                days=1,
                start_date=next_run_time,
                args=[application, user.telegram_id]  # –ü–µ—Ä–µ–¥–∞–µ–º ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ args
            )
    finally:
        db.close()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º scheduler –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç application –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    application.scheduler = scheduler
    
    scheduler.start()
    bot_logger.info("Daily message scheduler started.")

@track_user
async def handle_emoji_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏."""
    query = update.callback_query
    await query.answer()
    
    mood = query.data
    user = query.from_user
    user_name = user.first_name if user.first_name else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if not hasattr(context, 'user_data'):
        context.user_data = {}
    if 'state' not in context.user_data:
        context.user_data['state'] = MENU
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile = get_or_create_user(
            db=db,
            telegram_id=str(user.id),
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['user_profile'] = user_profile
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
        add_health_check(db=db, user_id=user_profile.id, mood=mood)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –ø–æ –∏–º–µ–Ω–∏
        mood_responses = {
            'very_sad': f'{user_name}, –º–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –ø–ª–æ—Ö–æ. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ! üåÖ',
            'sad': f'{user_name}, –∂–∞–ª—å, —á—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –Ω–µ –æ—á–µ–Ω—å. –ù–∞–¥–µ—é—Å—å, –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ª—É—á—à–µ! üåÖ',
            'neutral': f'{user_name}, –ø–æ–Ω—è—Ç–Ω–æ. –ù–∞–¥–µ—é—Å—å, –∑–∞–≤—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±—É–¥–µ—Ç –ª—É—á—à–µ! ‚ú®',
            'good': f'–û—Ç–ª–∏—á–Ω–æ, {user_name}! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üåü',
            'very_good': f'–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, {user_name}! –û—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ —É —Ç–µ–±—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! üåü'
        }
        
        await query.edit_message_text(
            text=mood_responses[mood]
        )
        
    finally:
        db.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        persistence = PicklePersistence(
            filepath="bot_data",
            store_data=PersistenceInput(
                bot_data=True,
                chat_data=True,
                user_data=True,
                callback_data=True,
            ),
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
        application = ApplicationBuilder().token(TOKEN_BOT).persistence(persistence).build()
        bot_logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            scheduler = AsyncIOScheduler(timezone=pytz.utc)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫
            bot_logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
            schedule_daily_message(application)
            bot_logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
            bot_logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫...")
            scheduler.add_job(
                lambda: asyncio.create_task(process_broadcasts(application)),
                'interval',
                minutes=1,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                id='process_broadcasts',
                replace_existing=True  # –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
            )
            bot_logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∞–Ω–∫–µ—Ç–µ
            bot_logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∞–Ω–∫–µ—Ç–µ...")
            schedule_survey_reminders(scheduler, application)
            bot_logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∞–Ω–∫–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            bot_logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            scheduler.start()
            bot_logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}", exc_info=True)
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        
        bot_logger.info("Starting bot application...")
        
        # Import and initialize database here
        from database.database import init_db
        bot_logger.info("Initializing database...")
        init_db()
        bot_logger.info("Database initialized successfully")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        def signal_handler(sig, frame):
            bot_logger.info(f"Received signal {sig}, shutting down gracefully...")
            # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
            if hasattr(application, 'scheduler') and application.scheduler:
                application.scheduler.shutdown()
            # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
            application.stop()
            sys.exit(0)
        
        bot_logger.info("Setting up signal handlers...")
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, signal_handler)  # Ctrl+C
        signal.signal(signal.SIGTERM, signal_handler)  # kill
        
        if hasattr(signal, 'SIGBREAK'):  # Windows
            signal.signal(signal.SIGBREAK, signal_handler)
        bot_logger.info("Signal handlers configured")

        bot_logger.info("Registering command handlers...")
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
        application.add_handler(CommandHandler("admin", admin_commands))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        application.add_handler(CommandHandler("stats_recipes", stats_recipes))
        application.add_handler(CommandHandler("stats_health", stats_health))
        application.add_handler(CommandHandler("stats_users", stats_users))
        application.add_handler(CommandHandler("stats_help", stats_help))
        bot_logger.info("Command handlers registered")

        bot_logger.info("Setting up broadcast handler...")
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫
        application.add_handler(get_broadcast_handler())
        bot_logger.info("Broadcast handler configured")

        bot_logger.info("Setting up table handlers...")
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–∞–±–ª–∏—Ü
        from handlers.tables import (
            table_users, table_sessions, table_interactions,
            table_ratings, table_health, table_broadcasts
        )
        application.add_handler(CommandHandler("table_users", table_users))
        application.add_handler(CommandHandler("table_sessions", table_sessions))
        application.add_handler(CommandHandler("table_interactions", table_interactions))
        application.add_handler(CommandHandler("table_ratings", table_ratings))
        application.add_handler(CommandHandler("table_health", table_health))
        application.add_handler(CommandHandler("table_broadcasts", table_broadcasts))
        bot_logger.info("Table handlers configured")

        # –ì–ª–∞–≤–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –ø—Ä–æ–±–ª–µ–º—ã —è–≤–ª—è–µ—Ç—Å—è —Ç–æ, —á—Ç–æ fallback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è 
        # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ ConversationHandler, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥: –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ ConversationHandler, –∞ fallback-–ª–æ–≥–∏–∫—É
        # —Ä–µ–∞–ª–∏–∑—É–µ–º –≤–Ω—É—Ç—Ä–∏ –µ–≥–æ fallbacks.
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π,
        # –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ ConversationHandler
        async def universal_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            bot_logger.info(f"Universal message handler called for user {update.effective_user.id}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not hasattr(context, 'user_data'):
                context.user_data = {}
            if 'state' not in context.user_data:
                context.user_data['state'] = MENU
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
            if update.message and update.message.text.strip().lower() in ['–ø—Ä–∏–≤–µ—Ç', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç', '–º–µ–Ω—é']:
                return await start_menu(update, context)
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ GPT
            return await handle_message(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ fallback –≤ ConversationHandler
        async def universal_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥, –∫—Ä–æ–º–µ /start"""
            bot_logger.info(f"Universal command handler called for user {update.effective_user.id}: {update.message.text}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not hasattr(context, 'user_data'):
                context.user_data = {}
            if 'state' not in context.user_data:
                context.user_data['state'] = MENU
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start, –≤—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            if update.message.text.strip() == '/start':
                return await start_menu(update, context)
            
            # –ò–Ω–∞—á–µ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –∑–Ω–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å! üòä"
            )
            
            return MENU

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ConversationHandler —Å –Ω–∞—à–∏–º–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
        # –≤ –∫–∞—á–µ—Å—Ç–≤–µ fallbacks, —á—Ç–æ–±—ã –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
        # –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä track_user –∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
        universal_message_handler = track_user(universal_message_handler)
        universal_command_handler = track_user(universal_command_handler)
        
        bot_logger.info("Configuring conversation handler...")
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("start", start_menu),
                MessageHandler(filters.TEXT & ~filters.COMMAND, universal_message_handler),
                MessageHandler(filters.COMMAND, universal_command_handler)
            ],
            states={
                MENU: [
                    CallbackQueryHandler(menu_callback, pattern="^(about|check_product|healthy_recipes|back_to_menu|breakfast|poldnik|lunch|dinner|bcat_.*|bitem_.*|pcat_.*|pitem_.*|lcat_.*|litem_.*|dcat_.*|ditem_.*|rate_recipe|rating_.*|ignore_rating|category_.*|dish_.*|drinks|drinks_cat_.*|drinks_name_.*)$"),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
                ],
                CHECK_PRODUCT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, product_user_message),
                    CallbackQueryHandler(menu_callback, pattern="^back_to_menu$")
                ],
                RECIPES: [
                    CallbackQueryHandler(recipes_callback)
                ],
            },
            fallbacks=[
                CommandHandler("cancel", cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, universal_message_handler),
                MessageHandler(filters.COMMAND, universal_command_handler)
            ],
            allow_reentry=True,
            name="main_conversation",
            persistent=True
        )
        bot_logger.info("Adding conversation handler to application...")
        application.add_handler(conv_handler)
        bot_logger.info("Conversation handler added")

        bot_logger.info("Setting up emoji response handler...")
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —ç–º–æ–¥–∑–∏
        application.add_handler(CallbackQueryHandler(handle_emoji_response, pattern="^(very_sad|sad|neutral|good|very_good)$"))
        bot_logger.info("Emoji handler configured")
        
        bot_logger.info("Setting up survey callback handler...")
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∞–Ω–∫–µ—Ç—ã
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç URL-–ø—É—Ç—å –¥–ª—è –≤–µ–±-—Ö—É–∫–∞ –æ—Ç —Ñ–æ—Ä–º—ã
        application.add_handler(CommandHandler("survey_completed", handle_survey_callback))
        bot_logger.info("Survey callback handler configured")

        bot_logger.info("Configuring job queue...")
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        job_queue = application.job_queue
        job_queue.run_repeating(process_broadcasts, interval=60)
        bot_logger.info("Job queue configured")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
            """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏."""
            bot_logger.error(f"Exception while handling an update: {context.error}", exc_info=context.error)
            
        application.add_error_handler(error_handler)
        bot_logger.info("Error handler added")

        bot_logger.info("Starting polling...")
        
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        bot_logger.info("Bot stopped")
        
    except Exception as e:
        bot_logger.error(f"ERROR DURING BOT INITIALIZATION: {e}", exc_info=True)
        raise


if __name__ == "__main__":
    main()

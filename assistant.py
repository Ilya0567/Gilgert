from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes
from collections.abc import Mapping
import pandas as pd
import logging

from data_operation import save_user_data, check_product, id_request
import lunch
from config import DATA_FILE, TOKEN_BOT, CHAT_ID, DISHES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–û –Ω–∞—Å", callback_data='about')],
        [InlineKeyboardButton("–£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å", callback_data='ask_question')],
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="check_product")],
        [InlineKeyboardButton("–ó–¥–æ—Ä–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data="healthy_recipes")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text(
            text="üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–º–æ—â–∏ –ª—é–¥—è–º —Å —Å–∏–Ω–¥—Ä–æ–º–æ–º –ñ–∏–ª—å–±–µ—Ä–∞.\n\n"
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –í–∞–º —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –µ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç. –¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –º–Ω–æ–π –≤–∫—É—Å–Ω—ã–µ –∑–¥–æ—Ä–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.\n\n"
            "‚ú® –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", 
            reply_markup=reply_markup
        )
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            text="üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–º–æ—â–∏ –ª—é–¥—è–º —Å —Å–∏–Ω–¥—Ä–æ–º–æ–º –ñ–∏–ª—å–±–µ—Ä–∞.\n\n"
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –í–∞–º —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –µ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç. –¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –º–Ω–æ–π –≤–∫—É—Å–Ω—ã–µ –∑–¥–æ—Ä–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.\n\n"
            "‚ú® –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", 
            reply_markup=reply_markup
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    main_menu_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]
    ])

    if query.data == 'about':
        about_text = (
            "üë©‚Äçüíª –ú—ã –º–æ–ª–æ–¥–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ –ú–§–¢–ò, —Å–æ–∑–¥–∞—é—â–∞—è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –ª—é–¥–µ–π —Å —Å–∏–Ω–¥—Ä–æ–º–æ–º –ñ–∏–ª—å–±–µ—Ä–∞.\n\n"
            "ü§ñ –ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ª—é–¥–µ–π —Å —ç—Ç–∏–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ–º.\n\n"
            "üöÄ –ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –º—ã –≤–Ω–µ–¥—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ò–ò –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞."
        )
        await query.edit_message_text(text=about_text, reply_markup=main_menu_keyboard)
    elif query.data == 'ask_question':
        await query.edit_message_text(text="‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.", reply_markup=main_menu_keyboard)
        context.user_data['awaiting_question'] = True
    elif query.data == 'check_product':
        await query.edit_message_text(text="üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.", reply_markup=main_menu_keyboard)
        context.user_data['check_product'] = True
    elif query.data == 'start':
        await start(update, context)

    # –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    keyboard_recipes = [
            [InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞–∫–∏", callback_data="breakfast")],
            [InlineKeyboardButton("–û–±–µ–¥—ã", callback_data="lunch")],
            [InlineKeyboardButton("–£–∂–∏–Ω—ã", callback_data="dinner")],
            [InlineKeyboardButton("–ù–∞–ø–∏—Ç–∫–∏", callback_data="drinks")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start")]
        ]
    
    if query.data == "healthy_recipes":
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–¥–æ—Ä–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        reply_markup = InlineKeyboardMarkup(keyboard_recipes)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–¥–æ—Ä–æ–≤—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤:", reply_markup=reply_markup)



    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–±–µ–¥"
    if query.data == "lunch":
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç LunchGenerator
            lunch_ = lunch.LunchGenerator(data_source=DISHES)
            dishes = lunch_.get_lunch_names()
            dishes_text = "\n".join([f"- {dish}" for dish in dishes])
            keyboard_dish_options = [
                [InlineKeyboardButton("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", callback_data="ingredients_lunch")],
                [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="change_lunch")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="healthy_recipes")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard_dish_options)
            await query.edit_message_text(
                text=f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –Ω–∞ –æ–±–µ–¥:\n\n{dishes_text}",
                reply_markup=reply_markup
            )
        except Exception as e:
            await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–µ–¥–∞: {str(e)}")

    # # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"
    # if query.data == "ingredients_breakfast":
    #     dish = "–û–≤—Å—è–Ω–∫–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏"  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª—é–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    #     ingredients = recipe_manager.get_ingredients(dish)
    #     keyboard_ingredients_options = [
    #         [InlineKeyboardButton("–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è", callback_data="recipe_method")],
    #         [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="breakfast")],
    #         [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
    #     ]
    #     reply_markup = InlineKeyboardMarkup(keyboard_ingredients_options)
    #     await query.edit_message_text(
    #         text=f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –±–ª—é–¥–∞ '{dish}':\n\n{ingredients}",
    #         reply_markup=reply_markup
    #     )

    # # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å"
    # if query.data == "change_breakfast":
    #     # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤—ã—Ö –±–ª—é–¥ (—ç–º—É–ª–∏—Ä—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞ –±–ª—é–¥)
    #     dishes = recipe_manager.get_dishes("breakfast")
    #     dishes_text = "\n".join([f"- {dish}" for dish in dishes])
    #     keyboard_dish_options = [
    #         [InlineKeyboardButton("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", callback_data="ingredients_breakfast")],
    #         [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="change_breakfast")],
    #         [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="healthy_recipes")]
    #     ]
    #     reply_markup = InlineKeyboardMarkup(keyboard_dish_options)
    #     await query.edit_message_text(
    #         text=f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫:\n\n{dishes_text}",
    #         reply_markup=reply_markup
    #     )

    # # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"
    # if query.data == "recipe_method":
    #     method = "1. –ó–∞–ª–µ–π—Ç–µ –æ–≤—Å—è–Ω–∫—É –≥–æ—Ä—è—á–µ–π –≤–æ–¥–æ–π.\n2. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—Ä–µ–∑–∞–Ω–Ω—ã–µ —Ñ—Ä—É–∫—Ç—ã –∏ –º–µ–¥.\n3. –•–æ—Ä–æ—à–æ –ø–µ—Ä–µ–º–µ—à–∞–π—Ç–µ."
    #     keyboard_method_options = [
    #         [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="ingredients_breakfast")],
    #         [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
    #     ]
    #     reply_markup = InlineKeyboardMarkup(keyboard_method_options)
    #     await query.edit_message_text(
    #         text=f"–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:\n\n{method}",
    #         reply_markup=reply_markup
    #     )
        
    if query.data == "start":
        await update.callback_query.edit_message_text(
            text="üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–º–æ—â–∏ –ª—é–¥—è–º —Å —Å–∏–Ω–¥—Ä–æ–º–æ–º –ñ–∏–ª—å–±–µ—Ä–∞.\n\n"
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –í–∞–º —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –µ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç. –¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –º–Ω–æ–π –≤–∫—É—Å–Ω—ã–µ –∑–¥–æ—Ä–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.\n\n"
            "‚ú® –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", 
            reply_markup=reply_markup)
    

    
      



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    main_menu_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]
    ])

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å
    if context.user_data.get('awaiting_question'): 
        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        timestamp = update.message.date.timestamp()
        question = update.message.text
        user_id = update.message.from_user.id
        user_name = update.message.from_user.username or update.message.from_user.full_name
        context.user_data['awaiting_question'] = False
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
        question_id = save_user_data(timestamp, user_id, question, None)
        df = pd.read_csv(DATA_FILE, index_col=False)
        
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —á–∞—Ç")
        await update.message.reply_text(
        "‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®\n"
        "üì© *–í–∞—à –≤–æ–ø—Ä–æ—Å* üì©\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"‚ùì {question} ‚ùì\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        "‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®",
        parse_mode='Markdown', reply_markup=main_menu_keyboard
    )
        
        # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞–º
        await context.bot.send_message(chat_id=CHAT_ID, 
                                       text=f'–°–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ{question_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}:\n{question}')
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç
    elif context.user_data.get('check_product'): 
        timestamp = update.message.date.timestamp()
        product = update.message.text
        user_id = update.message.from_user.id
        user_name = update.message.from_user.username or update.message.from_user.full_name
        context.user_data['check_product'] = True
        # –∏—â–µ–º –æ—Ç–≤–µ—Ç 
        answer = check_product(product)
        # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(answer, reply_markup=main_menu_keyboard)
        # –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º
        if "–æ—Ç–≤–µ—Ç" in answer: 
            id_product_question = id_request()
            await context.bot.send_message(chat_id=CHAT_ID, 
                                       text=f'–í–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É ‚Ññ{id_product_question} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}:\n "{product}"')
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —á–∞—Ç–∞, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–≤–µ—á–∞–ª —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        if update.message.chat.type == 'private':
            await update.message.reply_text("üëâ –ü–æ5555–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π. üòä")


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(TOKEN_BOT).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(button))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(None, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()

import pandas as pd


class BreakfastGenerator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π –∑–∞–≤—Ç—Ä–∞–∫–æ–≤/–ø–æ–ª–¥–Ω–∏–∫–æ–≤ (–æ–¥–∏–Ω —Ñ–∞–π–ª breakfast.csv).
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫:
      - –ù–∞–∑–≤–∞–Ω–∏–µ
      - –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ 1 –ø–æ—Ä—Ü–∏—é:
      - –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
      - –ö–∞–∫–æ–µ –±–ª—é–¥–æ   (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞–≤—Ç—Ä–∞–∫' –∏–ª–∏ '–ø–æ–ª–¥–Ω–∏–∫')
      - –ë–ª—é–¥–æ –∏–∑      (–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä '–∫–∞—à–∞', '–æ–º–ª–µ—Ç', '–±—É—Ç–µ—Ä–±—Ä–æ–¥—ã' –∏ —Ç.–¥.)
    """

    def __init__(self, data_source):
        """
        data_source: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (CSV –∏–ª–∏ Excel) —Å –∑–∞–≤—Ç—Ä–∞–∫–∞–º–∏/–ø–æ–ª–¥–Ω–∏–∫–∞–º–∏.
        –ù–∞–ø—Ä–∏–º–µ—Ä: 'Data/breakfast.csv'
        """
        try:
            self.df = pd.read_csv(data_source)
            print("Breakfast DataFrame –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Breakfast DataFrame: {e}")
            self.df = None

        if self.df is None or self.df.empty:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≤—Ç—Ä–∞–∫–∞—Ö/–ø–æ–ª–¥–Ω–∏–∫–∞—Ö.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        needed_cols = ["–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∞:", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ 1 –ø–æ—Ä—Ü–∏—é:", "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:", "–ö–∞–∫–æ–µ –±–ª—é–¥–æ", "–ë–ª—é–¥–æ –∏–∑"]
        for col in needed_cols:
            if col not in self.df.columns:
                raise ValueError(f"–í —Ñ–∞–π–ª–µ —Å –∑–∞–≤—Ç—Ä–∞–∫–∞–º–∏/–ø–æ–ª–¥–Ω–∏–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '{col}'")

        self.df.columns = self.df.columns.str.strip()

    def filter_by_meal_type(self, meal_type: str):
        """
        –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –ø–æ –∫–æ–ª–æ–Ω–∫–µ '–ö–∞–∫–æ–µ –±–ª—é–¥–æ' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞–≤—Ç—Ä–∞–∫' –∏–ª–∏ '–ø–æ–ª–¥–Ω–∏–∫').
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ç–∞–±–ª–∏—Ü—É.
        """
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ '–ö–∞–∫–æ–µ –±–ª—é–¥–æ' –ª–µ–∂–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è '–∑–∞–≤—Ç—Ä–∞–∫' –∏–ª–∏ '–ø–æ–ª–¥–Ω–∏–∫'.
        return self.df

    def get_unique_categories(self, meal_type: str):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ '–ë–ª—é–¥–æ –∏–∑' –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ (–∑–∞–≤—Ç—Ä–∞–∫/–ø–æ–ª–¥–Ω–∏–∫).
        """
        sub_df = self.filter_by_meal_type(meal_type)
        return sorted(sub_df["–ë–ª—é–¥–æ –∏–∑"].dropna().unique().tolist())

    def get_items_by_category(self, meal_type: str, category: str):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ù–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ meal_type (–∑–∞–≤—Ç—Ä–∞–∫/–ø–æ–ª–¥–Ω–∏–∫) –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∫–æ–ª–æ–Ω–∫–∞ '–ë–ª—é–¥–æ –∏–∑').
        """
        sub_df = self.filter_by_meal_type(meal_type)
        sub_df = sub_df[sub_df["–ë–ª—é–¥–æ –∏–∑"] == category]
        return sub_df["–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∞:"].tolist()

    def get_item_details(self, item_name: str):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞.
        """
        row = self.df[self.df["–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∞:"] == item_name]
        if row.empty:
            return f"–ë–ª—é–¥–æ ¬´{item_name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        ingredients = row.iloc[0]["–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ 1 –ø–æ—Ä—Ü–∏—é:"]
        preparation = row.iloc[0]["–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:"]
        return (
            f"üç≥ {item_name}\n\n"
            f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{ingredients}\n\n"
            f"–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n{preparation}"
        )

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from database import SessionLocal
from models import ClientProfile, UserSession, UserInteraction, RecipeRating
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import pytz

async def get_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for getting user statistics"""
    user = update.effective_user
    
    # Check if user is authorized to view stats
    if str(user.id) != "669201758":
        await update.message.reply_text("‚õîÔ∏è Sorry, you are not authorized to view statistics.")
        return
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        client_profiles = db.query(ClientProfile).all()
        user_sessions = db.query(UserSession).all()
        user_interactions = db.query(UserInteraction).all()
        recipe_ratings = db.query(RecipeRating).all()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
        messages = []
        messages.append("üìä –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü:\n\n")
        messages.append("Client Profiles:\n" + "\n".join([str(profile) for profile in client_profiles]) + "\n\n")
        messages.append("User Sessions:\n" + "\n".join([str(session) for session in user_sessions]) + "\n\n")
        messages.append("User Interactions:\n" + "\n".join([str(interaction) for interaction in user_interactions]) + "\n\n")
        messages.append("Recipe Ratings:\n" + "\n".join([str(rating) for rating in recipe_ratings]) + "\n\n")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
        for message in messages:
            if len(message) > 4096:  # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è 4096 —Å–∏–º–≤–æ–ª–∞–º–∏
                for i in range(0, len(message), 4096):
                    await update.message.reply_text(message[i:i+4096])
            else:
                await update.message.reply_text(message)
        
    finally:
        db.close()

async def send_daily_message(context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    job = context.job
    chat_id = job.context

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await context.bot.get_chat(chat_id)
    user_name = user.first_name

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏
    keyboard = [
        [InlineKeyboardButton("üò¢", callback_data='sad')],
        [InlineKeyboardButton("üòê", callback_data='neutral')],
        [InlineKeyboardButton("üòä", callback_data='happy')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å, –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? –û—Ü–µ–Ω–∏ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ.",
        reply_markup=reply_markup
    )

def schedule_daily_message(application):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ 1:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏."""
    scheduler = AsyncIOScheduler()
    moscow_tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(moscow_tz)
    next_run_time = now.replace(hour=1, minute=0, second=0, microsecond=0)
    if now >= next_run_time:
        next_run_time += timedelta(days=1)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.add_job(
        send_daily_message,
        'interval',
        days=1,
        start_date=next_run_time,
        args=[application],
        context=YOUR_CHAT_ID  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    )
    scheduler.start()

def main():
    bot_logger.info("Starting bot application...")
    
    from database import init_db
    bot_logger.info("Initializing database...")
    init_db()
    bot_logger.info("Database initialized successfully")
    
    application = ApplicationBuilder().token(TOKEN_BOT).build()

    # Add stats command handler
    application.add_handler(CommandHandler("stats", get_stats))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    schedule_daily_message(application)

    # ConversationHandler –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    bot_logger.info("Configuring conversation handler...")
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ... 
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from datetime import datetime, timedelta

from database.database import SessionLocal
from database.models import RecipeRating, DailyHealthCheck, ClientProfile
from database.crud import get_user_health_stats
from sqlalchemy import func
from utils.config import ADMIN_ID  # –î–æ–±–∞–≤—å —Å–≤–æ–π Telegram ID –≤ config.py
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz

async def get_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for getting user statistics"""
    user = update.effective_user
    
    # Check if user is authorized to view stats
    if str(user.id) != "669201758":
        await update.message.reply_text("‚õîÔ∏è Sorry, you are not authorized to view statistics.")
        return
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        client_profiles = db.query(ClientProfile).all()
        user_sessions = db.query(UserSession).all()
        user_interactions = db.query(UserInteraction).all()
        recipe_ratings = db.query(RecipeRating).all()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
        messages = []
        messages.append("üìä –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü:\n\n")
        messages.append("Client Profiles:\n" + "\n".join([str(profile) for profile in client_profiles]) + "\n\n")
        messages.append("User Sessions:\n" + "\n".join([str(session) for session in user_sessions]) + "\n\n")
        messages.append("User Interactions:\n" + "\n".join([str(interaction) for interaction in user_interactions]) + "\n\n")
        messages.append("Recipe Ratings:\n" + "\n".join([str(rating) for rating in recipe_ratings]) + "\n\n")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
        for message in messages:
            if len(message) > 4096:  # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è 4096 —Å–∏–º–≤–æ–ª–∞–º–∏
                for i in range(0, len(message), 4096):
                    await update.message.reply_text(message[i:i+4096])
            else:
                await update.message.reply_text(message)
        
    finally:
        db.close()

async def send_daily_message(context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    job = context.job
    chat_id = job.context

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await context.bot.get_chat(chat_id)
    user_name = user.first_name

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏
    keyboard = [
        [InlineKeyboardButton("üò¢", callback_data='sad')],
        [InlineKeyboardButton("üòê", callback_data='neutral')],
        [InlineKeyboardButton("üòä", callback_data='happy')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å, –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? –û—Ü–µ–Ω–∏ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ.",
        reply_markup=reply_markup
    )

def schedule_daily_message(application):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ 1:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏."""
    scheduler = AsyncIOScheduler()
    moscow_tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(moscow_tz)
    next_run_time = now.replace(hour=1, minute=0, second=0, microsecond=0)
    if now >= next_run_time:
        next_run_time += timedelta(days=1)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.add_job(
        send_daily_message,
        'interval',
        days=1,
        start_date=next_run_time,
        args=[application],
        context=YOUR_CHAT_ID  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    )
    scheduler.start()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return str(user_id) == str(ADMIN_ID)

async def check_admin(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return False
    return True

async def stats_recipes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ü–µ–ø—Ç–∞–º"""
    if not await check_admin(update):
        return

    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ—Ü–µ–ø—Ç–∞–º
        avg_ratings = (
            db.query(
                RecipeRating.recipe_type,
                func.avg(RecipeRating.rating).label('avg_rating'),
                func.count(RecipeRating.id).label('total_ratings')
            )
            .group_by(RecipeRating.recipe_type)
            .all()
        )

        stats_message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤:\n\n"
        
        type_names = {
            'breakfast': '–ó–∞–≤—Ç—Ä–∞–∫–∏',
            'lunch': '–û–±–µ–¥—ã',
            'poldnik': '–ü–æ–ª–¥–Ω–∏–∫–∏',
            'drink': '–ù–∞–ø–∏—Ç–∫–∏'
        }
        
        for recipe_type, avg_rating, total in avg_ratings:
            display_name = type_names.get(recipe_type, recipe_type)
            stats_message += f"{display_name}:\n"
            stats_message += f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f}\n"
            stats_message += f"üìù –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {total}\n\n"

        if not avg_ratings:
            stats_message = "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤."

        await update.message.reply_text(stats_message)

    finally:
        db.close()

async def stats_health(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not await check_admin(update):
        return

    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = datetime.now() - timedelta(days=30)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
        mood_stats = (
            db.query(
                DailyHealthCheck.mood,
                func.count(DailyHealthCheck.id).label('count')
            )
            .filter(DailyHealthCheck.timestamp >= thirty_days_ago)
            .group_by(DailyHealthCheck.mood)
            .all()
        )

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = (
            db.query(func.count(func.distinct(DailyHealthCheck.user_id)))
            .filter(DailyHealthCheck.timestamp >= thirty_days_ago)
            .scalar()
        )

        stats_message = "üé≠ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (–∑–∞ 30 –¥–Ω–µ–π):\n\n"
        
        total_responses = sum(count for _, count in mood_stats)
        
        mood_names = {
            'happy': 'üòä –•–æ—Ä–æ—à–µ–µ',
            'neutral': 'üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ',
            'sad': 'üò¢ –ì—Ä—É—Å—Ç–Ω–æ–µ'
        }
        
        for mood, count in mood_stats:
            percentage = (count / total_responses * 100) if total_responses > 0 else 0
            stats_message += f"{mood_names.get(mood, mood)}:\n"
            stats_message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count} ({percentage:.1f}%)\n\n"
        
        stats_message += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
        stats_message += f"üìù –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {total_responses}"

        await update.message.reply_text(stats_message)

    finally:
        db.close()

async def stats_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not await check_admin(update):
        return

    db = SessionLocal()
    try:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = db.query(func.count(ClientProfile.id)).scalar()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        week_ago = datetime.now() - timedelta(days=7)
        active_users_week = (
            db.query(func.count(func.distinct(ClientProfile.id)))
            .filter(ClientProfile.last_interaction >= week_ago)
            .scalar()
        )

        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        new_users_week = (
            db.query(func.count(ClientProfile.id))
            .filter(ClientProfile.created_at >= week_ago)
            .scalar()
        )

        stats_message = "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        stats_message += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        stats_message += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_users_week}\n"
        stats_message += f"–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {new_users_week}\n"

        await update.message.reply_text(stats_message)

    finally:
        db.close()

async def stats_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not await check_admin(update):
        return

    help_message = "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n\n"
    help_message += "/stats_recipes - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ü–µ–ø—Ç–∞–º\n"
    help_message += "/stats_health - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n"
    help_message += "/stats_users - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    help_message += "/stats_help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"

    await update.message.reply_text(help_message)

def main():
    bot_logger.info("Starting bot application...")
    
    from database import init_db
    bot_logger.info("Initializing database...")
    init_db()
    bot_logger.info("Database initialized successfully")
    
    application = ApplicationBuilder().token(TOKEN_BOT).build()

    # Add stats command handler
    application.add_handler(CommandHandler("stats", get_stats))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    schedule_daily_message(application)

    # ConversationHandler –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    bot_logger.info("Configuring conversation handler...")
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ... 
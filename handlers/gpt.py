# handlers_gpt.py
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from utils.states import MENU, GPT_QUESTION, CHECK_PRODUCT, RECIPES
from utils import gpt_35
from utils.config import OPENAI_API_KEY
from handlers.recipes import recipes_callback
from database.database import SessionLocal
from database.crud import get_user_conversation_history, update_conversation_history, get_or_create_user

logger = logging.getLogger(__name__)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ GPT,
    –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ –¥—Ä—É–≥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ç.–¥.)
    """
    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ –¥—Ä—É–≥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GPT
    current_state = context.user_data.get('state')
    if current_state in [CHECK_PRODUCT, RECIPES]:
        return

    user_message = update.message.text
    user_id = update.effective_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ context.user_data
        user_profile = context.user_data.get('user_profile')
        if not user_profile:
            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –ë–î –ø–æ telegram_id
            user_profile = get_or_create_user(
                db=db,
                telegram_id=user_id,
                username=update.effective_user.username,
                first_name=update.effective_user.first_name,
                last_name=update.effective_user.last_name
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            context.user_data['user_profile'] = user_profile
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_user_id = user_profile.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        if 'messages_history' not in context.user_data:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î
            context.user_data['messages_history'] = get_user_conversation_history(db, db_user_id)
            logger.info(f"Loaded message history for user {user_id} from database")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        context.user_data['messages_history'].append({
            "role": "user",
            "content": user_message
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if len(context.user_data['messages_history']) > 10:
            context.user_data['messages_history'] = context.user_data['messages_history'][-10:]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ GPT —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
        gpt_client = gpt_35.ChatGPTClient(api_key=OPENAI_API_KEY)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
        gpt_response = gpt_client.generate_response(
            user_message=user_message,
            message_history=context.user_data['messages_history']
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        if gpt_response.startswith("FUNCTION_CALL:"):
            function_parts = gpt_response.split(":", 2)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ 3 —á–∞—Å—Ç–∏: FUNCTION_CALL, –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            function_name = function_parts[1]
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
            context_response = function_parts[2] if len(function_parts) > 2 else "–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –Ω–∞—à–∏ –∑–¥–æ—Ä–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã ü•ó"
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
            if function_name == "show_healthy_recipes":
                logger.info(f"Function call detected: {function_name}")
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Ä–µ—Ü–µ–ø—Ç–∞–º —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
                await update.message.reply_text(context_response)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
                keyboard = [
                    [InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞–∫–∏", callback_data="breakfast")],
                    [InlineKeyboardButton("–ü–æ–ª–¥–Ω–∏–∫–∏", callback_data="poldnik")],
                    [InlineKeyboardButton("–û–±–µ–¥—ã", callback_data="lunch")],
                    [InlineKeyboardButton("–£–∂–∏–Ω—ã", callback_data="dinner")],
                    [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏:",
                    reply_markup=reply_markup
                )
                
                # –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º
                # –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ
                context.user_data['recipes_menu_active'] = True
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                context.user_data['messages_history'].append({
                    "role": "assistant",
                    "content": context_response
                })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –ë–î
                update_conversation_history(db, db_user_id, context.user_data['messages_history'])
                
                return MENU
        
        # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–µ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏)
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        context.user_data['messages_history'].append({
            "role": "assistant",
            "content": gpt_response
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if db_user_id:
            try:
                update_conversation_history(db, db_user_id, context.user_data['messages_history'])
                logger.info(f"Saved message history for user {user_id} to database")
            except Exception as e:
                logger.error(f"Failed to save message history: {e}")
        else:
            logger.warning(f"Cannot save message history: invalid user_id for user {user_id}")

        await update.message.reply_text(
            text=gpt_response
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GPT: {e}", exc_info=True)
        await update.message.reply_text(
            text=f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:\n{str(e)}"
        )
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        db.close()

    return MENU

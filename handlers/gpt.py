# handlers_gpt.py
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from utils.states import MENU, GPT_QUESTION, CHECK_PRODUCT, RECIPES
from utils import gpt_35
from utils.config import OPENAI_API_KEY
from handlers.recipes import recipes_callback
from database.database import SessionLocal
from database.crud import get_user_conversation_history, update_conversation_history, get_or_create_user, save_conversation_history

logger = logging.getLogger(__name__)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ GPT,
    –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ –¥—Ä—É–≥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ç.–¥.)
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if not hasattr(context, 'user_data'):
        context.user_data = {}
    if 'state' not in context.user_data:
        context.user_data['state'] = MENU
        
    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ –¥—Ä—É–≥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GPT
    current_state = context.user_data.get('state')
    if current_state in [CHECK_PRODUCT, RECIPES]:
        return

    user_message = update.message.text
    user_id = update.effective_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_message[:50]}...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        db_user_id = context.user_data.get('user_id')
        if not db_user_id:
            # –ï—Å–ª–∏ id –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile = get_or_create_user(
                db=db,
                telegram_id=user_id,
                username=update.effective_user.username,
                first_name=update.effective_user.first_name,
                last_name=update.effective_user.last_name
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            db_user_id = user_profile.id
            context.user_data['user_id'] = db_user_id
            
        logger.info(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {db_user_id}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        if 'messages_history' not in context.user_data:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î
            history = get_user_conversation_history(db, db_user_id)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            if history and isinstance(history, list):
                context.user_data['messages_history'] = history
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –ë–î: {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                logger.debug(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏—Å—Ç–æ—Ä–∏–∏: {history}")
            else:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º, –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                context.user_data['messages_history'] = []
                logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
        else:
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é: {len(context.user_data['messages_history'])} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
        # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ: {len(context.user_data.get('messages_history', []))} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        context.user_data['messages_history'].append({
            "role": "user",
            "content": user_message
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if len(context.user_data['messages_history']) > 10:
            context.user_data['messages_history'] = context.user_data['messages_history'][-10:]
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ GPT —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
        gpt_client = gpt_35.ChatGPTClient(api_key=OPENAI_API_KEY)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
        gpt_response = gpt_client.generate_response(
            user_message=user_message,
            message_history=context.user_data['messages_history']
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        if gpt_response.startswith("FUNCTION_CALL:"):
            function_parts = gpt_response.split(":", 2)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ 3 —á–∞—Å—Ç–∏: FUNCTION_CALL, –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            function_name = function_parts[1]
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
            context_response = function_parts[2] if len(function_parts) > 2 else "–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –Ω–∞—à–∏ –∑–¥–æ—Ä–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã ü•ó"
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
            if function_name == "show_healthy_recipes":
                logger.info(f"Function call detected: {function_name}")
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Ä–µ—Ü–µ–ø—Ç–∞–º —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
                await update.message.reply_text(context_response)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
                keyboard = [
                    [InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞–∫–∏", callback_data="breakfast")],
                    [InlineKeyboardButton("–ü–æ–ª–¥–Ω–∏–∫–∏", callback_data="poldnik")],
                    [InlineKeyboardButton("–û–±–µ–¥—ã", callback_data="lunch")],
                    [InlineKeyboardButton("–£–∂–∏–Ω—ã", callback_data="dinner")],
                    [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏:",
                    reply_markup=reply_markup
                )
                
                # –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º
                # –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ
                context.user_data['recipes_menu_active'] = True
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                context.user_data['messages_history'].append({
                    "role": "assistant",
                    "content": context_response
                })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –ë–î
                updated_conversation = update_conversation_history(db, db_user_id, context.user_data['messages_history'])
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –ë–î")
                if updated_conversation:
                    logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, ID –∑–∞–ø–∏—Å–∏: {updated_conversation.id}")
                else:
                    logger.warning(f"–§—É–Ω–∫—Ü–∏—è update_conversation_history –≤–µ—Ä–Ω—É–ª–∞ None")
                
                return MENU
        
        # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–µ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏)
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        context.user_data['messages_history'].append({
            "role": "assistant",
            "content": gpt_response
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if db_user_id:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                updated_conversation = update_conversation_history(db, db_user_id, context.user_data['messages_history'])
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –ë–î")
                if updated_conversation:
                    logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, ID –∑–∞–ø–∏—Å–∏: {updated_conversation.id}")
                else:
                    logger.warning(f"–§—É–Ω–∫—Ü–∏—è update_conversation_history –≤–µ—Ä–Ω—É–ª–∞ None")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}", exc_info=True)
                # –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑, –Ω–æ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –≤–º–µ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                try:
                    new_conversation = save_conversation_history(db, db_user_id, context.user_data['messages_history'])
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {new_conversation and new_conversation.id}")
                except Exception as e2:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏: {e2}", exc_info=True)
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π user_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        await update.message.reply_text(
            text=gpt_response
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GPT: {e}", exc_info=True)
        await update.message.reply_text(
            text=f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:\n{str(e)}"
        )
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        db.close()

    return MENU

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters
from datetime import datetime
import pytz
import logging
from sqlalchemy import and_

from database.database import SessionLocal
from database.crud import create_broadcast, get_or_create_user, get_all_active_users, mark_broadcast_sent
from utils.config import ADMIN_IDS
from database.models import BroadcastMessage, ClientProfile

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
ENTER_MESSAGE = 1
ENTER_TIME = 2

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return str(user_id) in ADMIN_IDS

async def check_admin(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.\n"
            f"–í–∞—à ID: {update.effective_user.id}"
        )
        return False
    return True

async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not await check_admin(update):
        return ConversationHandler.END
    
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
    )
    return ENTER_MESSAGE

async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    if not await check_admin(update):
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data['broadcast_message'] = update.message.text
    
    await update.message.reply_text(
        "üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú'\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-04-05 15:30"
    )
    return ENTER_TIME

async def broadcast_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
    if not await check_admin(update):
        return ConversationHandler.END
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        scheduled_time = datetime.strptime(update.message.text, "%Y-%m-%d %H:%M")
        scheduled_time = pytz.timezone('Europe/Moscow').localize(scheduled_time)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if scheduled_time <= datetime.now(pytz.timezone('Europe/Moscow')):
            await update.message.reply_text(
                "‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.\n"
                "üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú'\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-04-05 15:30"
            )
            return ENTER_TIME
        
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∞
            admin_profile = get_or_create_user(
                db=db,
                telegram_id=str(update.effective_user.id),
                username=update.effective_user.username,
                first_name=update.effective_user.first_name,
                last_name=update.effective_user.last_name
            )
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            broadcast = create_broadcast(
                db=db,
                admin_id=admin_profile.id,
                message=context.user_data['broadcast_message'],
                scheduled_time=scheduled_time
            )
            
            await update.message.reply_text(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"üìù –¢–µ–∫—Å—Ç: {context.user_data['broadcast_message']}\n"
                f"üïí –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {scheduled_time.strftime('%Y-%m-%d %H:%M')}"
            )
            return ConversationHandler.END
            
        finally:
            db.close()
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n"
            "üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú'\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-04-05 15:30"
        )
        return ENTER_TIME

async def broadcast_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not await check_admin(update):
        return ConversationHandler.END
    
    await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def process_broadcasts(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        broadcasts = get_pending_broadcasts(db)
        
        for broadcast in broadcasts:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = get_active_users(db)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for user in users:
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=broadcast.message
                    )
                except Exception as e:
                    logger.error(f"Failed to send broadcast to user {user.telegram_id}: {e}")
            
            # –ü–æ–º–µ—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
            mark_broadcast_sent(db, broadcast.id)
            
    finally:
        db.close()

def get_pending_broadcasts(db):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏, –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ"""
    now = datetime.now()
    return db.query(BroadcastMessage).filter(
        and_(
            BroadcastMessage.scheduled_time <= now,
            BroadcastMessage.is_sent == False
        )
    ).all()

def mark_broadcast_sent(db, broadcast_id):
    """–ü–æ–º–µ—á–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é"""
    broadcast = db.query(BroadcastMessage).get(broadcast_id)
    if broadcast:
        broadcast.is_sent = True
        db.commit()

def get_active_users(db):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return db.query(ClientProfile).filter(ClientProfile.is_active == True).all()

def get_broadcast_handler() -> ConversationHandler:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç handler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫"""
    return ConversationHandler(
        entry_points=[CommandHandler("broadcast", broadcast_start)],
        states={
            ENTER_MESSAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_message)
            ],
            ENTER_TIME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_time)
            ],
        },
        fallbacks=[CommandHandler("cancel", broadcast_cancel)],
    ) 
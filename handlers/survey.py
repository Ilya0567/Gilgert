import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database.database import SessionLocal
from database.crud import get_or_create_survey_status, update_survey_reminder, mark_survey_completed
import time
import asyncio

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
survey_logger = logging.getLogger(__name__)

async def send_survey_invitation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_profile = context.user_data.get('user_profile')
        
        if not user_profile:
            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            survey_logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            from database.database import get_or_create_user
            user_profile = get_or_create_user(
                db=db,
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['user_profile'] = user_profile
        
        if not user_profile:
            survey_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã")
            return

        survey_logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} (–ø—Ä–æ—Ñ–∏–ª—å: {user_profile.id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã
        survey_status = get_or_create_survey_status(db, user_profile.id)
        
        # –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        if survey_status.is_completed:
            survey_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        update_survey_reminder(db, user_profile.id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        name = user.first_name or "–¥—Ä—É–≥"
        message = (
            f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n\n"
            f"–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è –º–æ–≥ –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, "
            f"–º–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ.\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ. "
            f"–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∞–Ω–∫–µ—Ç–µ
        keyboard = [
            [InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", url="https://example.com/survey")]  # URL –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É—á–∏—Ç—ã–≤–∞—è —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        try:
            # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ callback_query –∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if update.callback_query and not update.callback_query.message.text:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=user.id,
                    text=message,
                    reply_markup=reply_markup
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=user.id,
                    text=message,
                    reply_markup=reply_markup
                )
                
            survey_logger.info(f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
        except Exception as e:
            survey_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º: {e}", exc_info=True)
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
            try:
                await context.bot.send_message(
                    chat_id=user.id,
                    text=message,
                    reply_markup=reply_markup
                )
                survey_logger.info(f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
            except Exception as e2:
                survey_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º: {e2}", exc_info=True)
            
    except Exception as e:
        survey_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}", exc_info=True)
    finally:
        db.close()

async def send_survey_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –µ—ë.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
    """
    survey_logger.info("–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã")
    
    db = SessionLocal()
    try:
        from database.crud import get_users_needing_survey_reminder
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        users = get_users_needing_survey_reminder(db)
        
        survey_logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∞–Ω–∫–µ—Ç–µ")
        
        for user in users:
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                message = (
                    "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
                    "–•–æ—á—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —Ç—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª(–∞) –∞–Ω–∫–µ—Ç—É. "
                    "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å–æ–≤–µ—Ç—ã.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–π–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å."
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∞–Ω–∫–µ—Ç–µ
                keyboard = [
                    [InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", url="https://example.com/survey")]  # URL –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=user.telegram_id,
                    text=message,
                    reply_markup=reply_markup
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                update_survey_reminder(db, user.id)
                
                survey_logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∞–Ω–∫–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await asyncio.sleep(0.5)
                
            except Exception as e:
                survey_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                continue
                
    except Exception as e:
        survey_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∞–Ω–∫–µ—Ç–µ: {e}", exc_info=True)
    finally:
        db.close()

async def handle_survey_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –æ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –≤–µ–±-—Ö—É–∫).
    """
    user = update.effective_user
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_profile = context.user_data.get('user_profile')
        
        if not user_profile:
            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            survey_logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            from database.database import get_or_create_user
            user_profile = get_or_create_user(
                db=db,
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['user_profile'] = user_profile
            
        if not user_profile:
            survey_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã")
            return
            
        # –û—Ç–º–µ—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –∫–∞–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        mark_survey_completed(db, user_profile.id)
        
        # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(
            chat_id=user.id,
            text="–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã! –¢–µ–ø–µ—Ä—å —è —Å–º–æ–≥—É –¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. üòä"
        )
        
        survey_logger.info(f"–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
    except Exception as e:
        survey_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}: {e}", exc_info=True)
    finally:
        db.close()

def schedule_survey_reminders(scheduler, application):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
    
    Args:
        scheduler: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        application: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram –±–æ—Ç–∞
    """
    # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±–µ—Ä—Ç–∫—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ application –≤ context
    async def send_survey_reminder_wrapper():
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        context = ContextTypes.DEFAULT_TYPE(
            application=application,
            chat_data=None,
            user_data=None,
            bot_data=None,
            job=None
        )
        await send_survey_reminder(context)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.add_job(
        lambda: asyncio.create_task(send_survey_reminder_wrapper()),
        'cron', 
        hour=15,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 15:00
        minute=1,
        id='survey_reminder'
    )
    survey_logger.info("–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∞–Ω–∫–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫") 
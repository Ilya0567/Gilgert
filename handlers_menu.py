# handlers_menu.py
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, ConversationHandler

# –°–æ—Å—Ç–æ—è–Ω–∏—è
from assistant import MENU, GPT_QUESTION, CHECK_PRODUCT, RECIPES

logger = logging.getLogger(__name__)


async def start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–û –Ω–∞—Å", callback_data='about')],
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å (GPT)", callback_data='ask_question')],
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data='check_product')],
        [InlineKeyboardButton("–ó–¥–æ—Ä–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data='healthy_recipes')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            text="üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫...",
            reply_markup=reply_markup
        )
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            text="üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫...",
            reply_markup=reply_markup
        )
    return MENU


async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'about':
        about_text = "ü§ñ ¬´PYOOTS¬ª ‚Äî ... (–æ–ø–∏—Å–∞–Ω–∏–µ)"
        await query.edit_message_text(
            text=about_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
            ])
        )
        return MENU

    elif data == 'ask_question':
        await query.edit_message_text(
            text="‚ùì –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è GPT:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='back_to_menu')]
            ])
        )
        return GPT_QUESTION

    elif data == 'check_product':
        await query.edit_message_text(
            text="üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='back_to_menu')]
            ])
        )
        return CHECK_PRODUCT

    elif data == 'healthy_recipes':
        # –ú–µ–Ω—é, –≥–¥–µ –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–∑–∞–≤—Ç—Ä–∞–∫–∏¬ª, ¬´–æ–±–µ–¥—ã¬ª, ¬´—É–∂–∏–Ω—ã¬ª
        # (–£–±–∏—Ä–∞–µ–º "–Ω–∞–ø–∏—Ç–∫–∏" - –æ–Ω–æ —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥–º–µ–Ω—é)
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞–∫–∏", callback_data="breakfast")],
                [InlineKeyboardButton("–û–±–µ–¥—ã", callback_data="lunch")],
                [InlineKeyboardButton("–£–∂–∏–Ω—ã", callback_data="dinner")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')]
            ])
        )
        return RECIPES

    elif data == 'back_to_menu':
        return await start_menu(update, context)

    return MENU


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ /start –∑–∞–Ω–æ–≤–æ.")
    elif update.callback_query:
        await update.callback_query.edit_message_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ /start –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END
